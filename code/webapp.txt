HTTP PROTOCOL
https://developer.mozilla.org/en-­US/docs/Web/HTTP/Overview

PYTHON WSGI=Web Server Gateway Interface
It is a standard interface to be implemented by web
servers and it is the ”contract” through which a web server can
call a piece of code
https://www.python.org/dev/peps/pep-3333/

FLASK
http://flask.pocoo.org/docs/1.0/
pip install Flask

(se4g) C:\Users\sara maffioli\Desktop\prova1>set FLASK_APP=prova.py
(se4g) C:\Users\sara maffioli\Desktop\prova1>set FLASK_ENV=development
(se4g) C:\Users\sara maffioli\Desktop\prova1>flask run


from flask import Flask
# Create the application instance
app = Flask(__name__)
# Create a URL route in our application for "/"
@app.route('/')
def home():
	return 'Hello!!!!'
# If we're running in stand alone mode, run the application
if __name__ == '__main__':
	app.run(debug=True)

First we imported the Flask class. An instance of this class will be our WSGI application.
Next we create an instance of this class. The first argument is the name of the application’s module or package. If you are using a single module (as in this example), you should use __name__ because depending on if it’s started as application or imported as module the name will be different ('__main__' versus the actual import name). This is needed so that Flask knows where to look for templates, static files, and so on. For more information have a look at the Flask documentation.
We then use the route() decorator to tell Flask what URL should trigger our function.
The function is given a name which is also used to generate URLs for that particular function, and returns the message we want to display in the user’s browser.